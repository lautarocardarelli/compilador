package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal IDENTIFIER;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal COMA;
terminal PUNTO_COMA;
terminal OPERACION_TIPO;
terminal CORCH_ABIERTO;
terminal CORCH_CERRADO;
terminal LLAVE_ABIERTA;
terminal LLAVE_CERRADA;
terminal MENOR_IG;
terminal MENOR;
terminal MAYOR_IG;
terminal MAYOR;
terminal IGUAL;
terminal DISTINTO;
terminal WHILE;
terminal AND;
terminal OR;
terminal IF;
terminal ELSE;
terminal WRITE;
terminal READ;
terminal NOT;
terminal INIT;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal ENDDO;
terminal COMMENT;
terminal PUNTO;
terminal ALLEQUAL;

// Non Terminals
non terminal program;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal condicion;
non terminal rw;
non terminal condiciones;
non terminal comparador;
non terminal operador_logico;
non terminal bloque_inicializacion;
non terminal sentencia_inicializacion;
non terminal tipo_variable;
non terminal casebody;
non terminal condicioncase;
non terminal EqLista;
non terminal ExpLista;

// Start Symbol Definition
start with program;

program ::= sentence {: System.out.println("End / Program"); :};
program ::= program sentence {: System.out.println("Program + Sentence"); :};

sentence ::= COMMENT {: System.out.println("Comment"); :};
sentence ::= IDENTIFIER ASSIG expression {: System.out.println("IDENTIFIER = expression [ASIGNACION] \n"); :};
sentence ::= INIT LLAVE_ABIERTA bloque_inicializacion LLAVE_CERRADA {: System.out.println("INIT LLAVE_ABIERTA bloque inicializacion LLAVE_CERRADA \n"); :};
sentence ::= IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA program LLAVE_CERRADA {: System.out.println("IF Sin else \n"); :};
sentence ::= IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA program LLAVE_CERRADA ELSE LLAVE_ABIERTA program LLAVE_CERRADA{: System.out.println("IF con else \n"); :};
sentence ::= WHILE OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA program LLAVE_CERRADA {: System.out.println("WHILE \n"); :};
sentence ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET \n"); :};
sentence ::= WRITE OPEN_BRACKET factor CLOSE_BRACKET {: System.out.println("WRITE OPEN_BRACKET factor CLOSE_BRACKET \n"); :};

// do case
sentence ::= DO factor casebody ENDDO {: System.out.println("DO factor recursivos \n"); :};
sentence ::= DO factor casebody DEFAULT program ENDDO {: System.out.println("DO factor recursivos DEFAULT opcional ENDDO \n"); :};
casebody ::= casebody CASE condicioncase program {: System.out.println("CASE BODY + CASE BODY \n"); :};
casebody ::= CASE condicioncase program {: System.out.println("CASE BODY \n "); :};

// al equal
sentence ::= ALLEQUAL OPEN_BRACKET EqLista CLOSE_BRACKET {: System.out.println("All equal \n"); :};
EqLista ::= EqLista COMA CORCH_ABIERTO ExpLista CORCH_CERRADO {: System.out.println("[EqLista] + [EqLista] \n "); :};
EqLista ::= CORCH_ABIERTO ExpLista CORCH_CERRADO {: System.out.println("[EqLista] \n"); :};
ExpLista ::= ExpLista COMA expression {: System.out.println("Exp Lista COMA expresion \n"); :};
ExpLista ::= expression {: System.out.println("Exp Lista \n"); :};

// Para el caso de a = 5, si el profe nos deja hacer a == 5 podemos eliminar esta regla.
condicioncase ::= IDENTIFIER ASSIG factor {: System.out.println("CASE condicioncase assignment \n"); :};

condicioncase ::= condicion ;

expression ::= expression PLUS term {: System.out.println("+ \n"); :};
expression ::= expression SUB term {: System.out.println("- \n"); :};
expression ::= term {: System.out.println("Expression = Term \n"); :};

bloque_inicializacion ::= bloque_inicializacion sentencia_inicializacion OPERACION_TIPO tipo_variable {: System.out.println("Bloque inicializacion sentencia inicializacion \n"); :};
bloque_inicializacion ::= sentencia_inicializacion OPERACION_TIPO tipo_variable {: System.out.println("Bloque inicializacion \n"); :};
sentencia_inicializacion ::= sentencia_inicializacion COMA IDENTIFIER:id {: System.out.println("Sentencia inicializacion COMA identifier" + id + "\n"); :};
sentencia_inicializacion ::= IDENTIFIER:id {: System.out.println("Sentencia Inicializacion " + id + "\n"); :};

tipo_variable ::= FLOAT {: System.out.println("Variable float \n"); :};
tipo_variable ::= INT {: System.out.println("Variable int \n"); :};
tipo_variable ::= STRING {: System.out.println("Variable string \n"); :};
condiciones  ::= condicion operador_logico condicion {: System.out.println("condicion operador_logico condicion \n"); :};
condiciones  ::= condicion {: System.out.println("CONDICION\n"); :};
condicion ::= IDENTIFIER comparador factor {: System.out.println("condicion es: ID comparador constante \n"); :};
condicion ::= NOT IDENTIFIER comparador factor {: System.out.println("condicion es: NOT ID comparador constante \n"); :};
operador_logico ::= AND {: System.out.println("operador_logico es: AND \n"); :};
operador_logico ::= OR {: System.out.println("operador_logico es: OR \n"); :};
comparador  ::= MENOR_IG {: System.out.println("comparador es MENOR_IG \n"); :};
comparador  ::= MENOR {: System.out.println("comparador es MENOR \n"); :};
comparador  ::= MAYOR_IG {: System.out.println("comparador es MAYOR_IG \n"); :};
comparador  ::= MAYOR {: System.out.println("comparador es MAYOR \n"); :};
comparador  ::= IGUAL {: System.out.println("comparador es IGUAL \n"); :};
comparador  ::= DISTINTO {: System.out.println("comparador es DISTINTO \n"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant ENTERA: " + constant + "\n" ); :};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant FLOTANTE: " + constant + "\n"); :};
factor ::= STRING_CONSTANT:constant {: System.out.println("Constant STRING: " + constant + "\n"); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression) \n"); :};